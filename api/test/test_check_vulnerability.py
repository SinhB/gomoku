import unittest
import numpy as np
from check_vulnerability import check_vulnerability

"""
Return
    0: starting_op,
    1: starting_blank,
    2: ending_op,
    3: ending_blank 
"""

class TestStartingOp(unittest.TestCase):
    asserting_result = (True, False, False, False)
    def test_long_side(self):
        side = np.array((-1,0,1,0,1,1,1,0))
        result = check_vulnerability(side, 1)
        assert result == self.asserting_result

    def test_one_len(self):
        side = np.array([-1])
        result = check_vulnerability(side, 1)
        assert result == self.asserting_result

class TestEndingOp(unittest.TestCase):
    asserting_result = (False, False, True, False)
    def test_long_side(self):
        side = np.array((1,-1,1,0,1,1,1,0))
        result = check_vulnerability(side, 1)
        assert result == self.asserting_result

    def test_one_len(self):
        side = np.array([-1])
        result = check_vulnerability(side, 1)
        assert result != self.asserting_result

class TestStartingBlank(unittest.TestCase):
    asserting_result = (False, True, False, False)
    def test_long_side(self):
        side = np.array((0,0,1,0,1,1,1,0))
        result = check_vulnerability(side, 1)
        assert result == self.asserting_result

    def test_one_len(self):
        side = np.array([0])
        result = check_vulnerability(side, 1)
        assert result == self.asserting_result

class TestEndingBlank(unittest.TestCase):
    asserting_result = (False, False, False, True)
    def test_long_side(self):
        side = np.array((1,0,1,0,1,1,1,0))
        result = check_vulnerability(side, 1)
        assert result == self.asserting_result

    def test_one_len(self):
        side = np.array([0])
        result = check_vulnerability(side, 1)
        assert result != self.asserting_result

class TestFalse(unittest.TestCase):
    asserting_result = (False, False, False, False)
    def test1(self):
        side = np.array((1,1,1,0,1,1,1,0))
        result = check_vulnerability(side, 1)
        assert result == self.asserting_result

    def test2(self):
        side = np.array((1,1,0,0,1,1,1,0))
        result = check_vulnerability(side, 1)
        assert result == self.asserting_result

    def test3(self):
        side = np.array((1,1,-1,0,0,1,1,1,0))
        result = check_vulnerability(side, 1)
        assert result == self.asserting_result

    def test4(self):
        side = np.array((1,1,-1,-1,0,1,1,1,0))
        result = check_vulnerability(side, 1)
        assert result == self.asserting_result

    def test5(self):
        side = np.array((1,1,1,1,0,1,1,1,0))
        result = check_vulnerability(side, 1)
        assert result == self.asserting_result

    def test6(self):
        side = np.array((1,1,1,-1,0,1,1,1,0))
        result = check_vulnerability(side, 1)
        assert result == self.asserting_result

    def test_one_len(self):
        side = np.array([1])
        result = check_vulnerability(side, 1)
        assert result == self.asserting_result

    def test_no_len(self):
        side = np.array([])
        result = check_vulnerability(side, 1)
        assert result == self.asserting_result